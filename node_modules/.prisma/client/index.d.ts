
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Employee
 * 
 */
export type Employee = {
  id: number
  firstName: string
  lastName: string
  email: string
  password: string
  isAdmin: boolean
}

/**
 * Model Department
 * 
 */
export type Department = {
  id: number
  name: string
}

/**
 * Model DepartmentHead
 * 
 */
export type DepartmentHead = {
  id: number
  employeeId: number
  departmentId: number
}

/**
 * Model AttendanceRecord
 * 
 */
export type AttendanceRecord = {
  id: number
  date: Date
  punchType: string
  timestamp: Date
  employeeId: number
}

/**
 * Model Exception
 * 
 */
export type Exception = {
  id: number
  date: Date
  note: string
  employeeId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Employees
 * const employees = await prisma.employee.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Employees
   * const employees = await prisma.employee.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<GlobalReject>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<GlobalReject>;

  /**
   * `prisma.departmentHead`: Exposes CRUD operations for the **DepartmentHead** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DepartmentHeads
    * const departmentHeads = await prisma.departmentHead.findMany()
    * ```
    */
  get departmentHead(): Prisma.DepartmentHeadDelegate<GlobalReject>;

  /**
   * `prisma.attendanceRecord`: Exposes CRUD operations for the **AttendanceRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AttendanceRecords
    * const attendanceRecords = await prisma.attendanceRecord.findMany()
    * ```
    */
  get attendanceRecord(): Prisma.AttendanceRecordDelegate<GlobalReject>;

  /**
   * `prisma.exception`: Exposes CRUD operations for the **Exception** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exceptions
    * const exceptions = await prisma.exception.findMany()
    * ```
    */
  get exception(): Prisma.ExceptionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Employee: 'Employee',
    Department: 'Department',
    DepartmentHead: 'DepartmentHead',
    AttendanceRecord: 'AttendanceRecord',
    Exception: 'Exception'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmployeeCountOutputType
   */


  export type EmployeeCountOutputType = {
    departments: number
    departmentHeads: number
    attendanceRecords: number
    exceptions: number
  }

  export type EmployeeCountOutputTypeSelect = {
    departments?: boolean
    departmentHeads?: boolean
    attendanceRecords?: boolean
    exceptions?: boolean
  }

  export type EmployeeCountOutputTypeGetPayload<S extends boolean | null | undefined | EmployeeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EmployeeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (EmployeeCountOutputTypeArgs)
    ? EmployeeCountOutputType 
    : S extends { select: any } & (EmployeeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EmployeeCountOutputType ? EmployeeCountOutputType[P] : never
  } 
      : EmployeeCountOutputType




  // Custom InputTypes

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect | null
  }



  /**
   * Count Type DepartmentCountOutputType
   */


  export type DepartmentCountOutputType = {
    employees: number
    departmentHeads: number
  }

  export type DepartmentCountOutputTypeSelect = {
    employees?: boolean
    departmentHeads?: boolean
  }

  export type DepartmentCountOutputTypeGetPayload<S extends boolean | null | undefined | DepartmentCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DepartmentCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DepartmentCountOutputTypeArgs)
    ? DepartmentCountOutputType 
    : S extends { select: any } & (DepartmentCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DepartmentCountOutputType ? DepartmentCountOutputType[P] : never
  } 
      : DepartmentCountOutputType




  // Custom InputTypes

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Employee
   */


  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    id: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    isAdmin: boolean | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    isAdmin: boolean | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    password: number
    isAdmin: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    isAdmin?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    isAdmin?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    isAdmin?: true
    _all?: true
  }

  export type EmployeeAggregateArgs = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: Enumerable<EmployeeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs = {
    where?: EmployeeWhereInput
    orderBy?: Enumerable<EmployeeOrderByWithAggregationInput>
    by: EmployeeScalarFieldEnum[]
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }


  export type EmployeeGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    email: string
    password: string
    isAdmin: boolean
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    isAdmin?: boolean
    departments?: boolean | Employee$departmentsArgs
    departmentHeads?: boolean | Employee$departmentHeadsArgs
    attendanceRecords?: boolean | Employee$attendanceRecordsArgs
    exceptions?: boolean | Employee$exceptionsArgs
    _count?: boolean | EmployeeCountOutputTypeArgs
  }


  export type EmployeeInclude = {
    departments?: boolean | Employee$departmentsArgs
    departmentHeads?: boolean | Employee$departmentHeadsArgs
    attendanceRecords?: boolean | Employee$attendanceRecordsArgs
    exceptions?: boolean | Employee$exceptionsArgs
    _count?: boolean | EmployeeCountOutputTypeArgs
  }

  export type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Employee :
    S extends undefined ? never :
    S extends { include: any } & (EmployeeArgs | EmployeeFindManyArgs)
    ? Employee  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'departments' ? Array < DepartmentGetPayload<S['include'][P]>>  :
        P extends 'departmentHeads' ? Array < DepartmentHeadGetPayload<S['include'][P]>>  :
        P extends 'attendanceRecords' ? Array < AttendanceRecordGetPayload<S['include'][P]>>  :
        P extends 'exceptions' ? Array < ExceptionGetPayload<S['include'][P]>>  :
        P extends '_count' ? EmployeeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EmployeeArgs | EmployeeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'departments' ? Array < DepartmentGetPayload<S['select'][P]>>  :
        P extends 'departmentHeads' ? Array < DepartmentHeadGetPayload<S['select'][P]>>  :
        P extends 'attendanceRecords' ? Array < AttendanceRecordGetPayload<S['select'][P]>>  :
        P extends 'exceptions' ? Array < ExceptionGetPayload<S['select'][P]>>  :
        P extends '_count' ? EmployeeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Employee ? Employee[P] : never
  } 
      : Employee


  type EmployeeCountArgs = 
    Omit<EmployeeFindManyArgs, 'select' | 'include'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmployeeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EmployeeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Employee'> extends True ? Prisma__EmployeeClient<EmployeeGetPayload<T>> : Prisma__EmployeeClient<EmployeeGetPayload<T> | null, null>

    /**
     * Find one Employee that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EmployeeFindUniqueOrThrowArgs>
    ): Prisma__EmployeeClient<EmployeeGetPayload<T>>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmployeeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EmployeeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Employee'> extends True ? Prisma__EmployeeClient<EmployeeGetPayload<T>> : Prisma__EmployeeClient<EmployeeGetPayload<T> | null, null>

    /**
     * Find the first Employee that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs>
    ): Prisma__EmployeeClient<EmployeeGetPayload<T>>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmployeeFindManyArgs>(
      args?: SelectSubset<T, EmployeeFindManyArgs>
    ): Prisma.PrismaPromise<Array<EmployeeGetPayload<T>>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
    **/
    create<T extends EmployeeCreateArgs>(
      args: SelectSubset<T, EmployeeCreateArgs>
    ): Prisma__EmployeeClient<EmployeeGetPayload<T>>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
    **/
    delete<T extends EmployeeDeleteArgs>(
      args: SelectSubset<T, EmployeeDeleteArgs>
    ): Prisma__EmployeeClient<EmployeeGetPayload<T>>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmployeeUpdateArgs>(
      args: SelectSubset<T, EmployeeUpdateArgs>
    ): Prisma__EmployeeClient<EmployeeGetPayload<T>>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmployeeDeleteManyArgs>(
      args?: SelectSubset<T, EmployeeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmployeeUpdateManyArgs>(
      args: SelectSubset<T, EmployeeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
    **/
    upsert<T extends EmployeeUpsertArgs>(
      args: SelectSubset<T, EmployeeUpsertArgs>
    ): Prisma__EmployeeClient<EmployeeGetPayload<T>>

    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmployeeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    departments<T extends Employee$departmentsArgs= {}>(args?: Subset<T, Employee$departmentsArgs>): Prisma.PrismaPromise<Array<DepartmentGetPayload<T>>| Null>;

    departmentHeads<T extends Employee$departmentHeadsArgs= {}>(args?: Subset<T, Employee$departmentHeadsArgs>): Prisma.PrismaPromise<Array<DepartmentHeadGetPayload<T>>| Null>;

    attendanceRecords<T extends Employee$attendanceRecordsArgs= {}>(args?: Subset<T, Employee$attendanceRecordsArgs>): Prisma.PrismaPromise<Array<AttendanceRecordGetPayload<T>>| Null>;

    exceptions<T extends Employee$exceptionsArgs= {}>(args?: Subset<T, Employee$exceptionsArgs>): Prisma.PrismaPromise<Array<ExceptionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Employee base type for findUnique actions
   */
  export type EmployeeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUnique
   */
  export interface EmployeeFindUniqueArgs extends EmployeeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee base type for findFirst actions
   */
  export type EmployeeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: Enumerable<EmployeeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: Enumerable<EmployeeScalarFieldEnum>
  }

  /**
   * Employee findFirst
   */
  export interface EmployeeFindFirstArgs extends EmployeeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: Enumerable<EmployeeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: Enumerable<EmployeeScalarFieldEnum>
  }


  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: Enumerable<EmployeeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: Enumerable<EmployeeScalarFieldEnum>
  }


  /**
   * Employee create
   */
  export type EmployeeCreateArgs = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }


  /**
   * Employee update
   */
  export type EmployeeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
  }


  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }


  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
  }


  /**
   * Employee.departments
   */
  export type Employee$departmentsArgs = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude | null
    where?: DepartmentWhereInput
    orderBy?: Enumerable<DepartmentOrderByWithRelationInput>
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DepartmentScalarFieldEnum>
  }


  /**
   * Employee.departmentHeads
   */
  export type Employee$departmentHeadsArgs = {
    /**
     * Select specific fields to fetch from the DepartmentHead
     */
    select?: DepartmentHeadSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentHeadInclude | null
    where?: DepartmentHeadWhereInput
    orderBy?: Enumerable<DepartmentHeadOrderByWithRelationInput>
    cursor?: DepartmentHeadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DepartmentHeadScalarFieldEnum>
  }


  /**
   * Employee.attendanceRecords
   */
  export type Employee$attendanceRecordsArgs = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendanceRecordInclude | null
    where?: AttendanceRecordWhereInput
    orderBy?: Enumerable<AttendanceRecordOrderByWithRelationInput>
    cursor?: AttendanceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AttendanceRecordScalarFieldEnum>
  }


  /**
   * Employee.exceptions
   */
  export type Employee$exceptionsArgs = {
    /**
     * Select specific fields to fetch from the Exception
     */
    select?: ExceptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExceptionInclude | null
    where?: ExceptionWhereInput
    orderBy?: Enumerable<ExceptionOrderByWithRelationInput>
    cursor?: ExceptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ExceptionScalarFieldEnum>
  }


  /**
   * Employee without action
   */
  export type EmployeeArgs = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude | null
  }



  /**
   * Model Department
   */


  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    id: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    id: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    id?: true
  }

  export type DepartmentSumAggregateInputType = {
    id?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type DepartmentAggregateArgs = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: Enumerable<DepartmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs = {
    where?: DepartmentWhereInput
    orderBy?: Enumerable<DepartmentOrderByWithAggregationInput>
    by: DepartmentScalarFieldEnum[]
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }


  export type DepartmentGroupByOutputType = {
    id: number
    name: string
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect = {
    id?: boolean
    name?: boolean
    employees?: boolean | Department$employeesArgs
    departmentHeads?: boolean | Department$departmentHeadsArgs
    _count?: boolean | DepartmentCountOutputTypeArgs
  }


  export type DepartmentInclude = {
    employees?: boolean | Department$employeesArgs
    departmentHeads?: boolean | Department$departmentHeadsArgs
    _count?: boolean | DepartmentCountOutputTypeArgs
  }

  export type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Department :
    S extends undefined ? never :
    S extends { include: any } & (DepartmentArgs | DepartmentFindManyArgs)
    ? Department  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'employees' ? Array < EmployeeGetPayload<S['include'][P]>>  :
        P extends 'departmentHeads' ? Array < DepartmentHeadGetPayload<S['include'][P]>>  :
        P extends '_count' ? DepartmentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DepartmentArgs | DepartmentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'employees' ? Array < EmployeeGetPayload<S['select'][P]>>  :
        P extends 'departmentHeads' ? Array < DepartmentHeadGetPayload<S['select'][P]>>  :
        P extends '_count' ? DepartmentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Department ? Department[P] : never
  } 
      : Department


  type DepartmentCountArgs = 
    Omit<DepartmentFindManyArgs, 'select' | 'include'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DepartmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DepartmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Department'> extends True ? Prisma__DepartmentClient<DepartmentGetPayload<T>> : Prisma__DepartmentClient<DepartmentGetPayload<T> | null, null>

    /**
     * Find one Department that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DepartmentFindUniqueOrThrowArgs>
    ): Prisma__DepartmentClient<DepartmentGetPayload<T>>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DepartmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DepartmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Department'> extends True ? Prisma__DepartmentClient<DepartmentGetPayload<T>> : Prisma__DepartmentClient<DepartmentGetPayload<T> | null, null>

    /**
     * Find the first Department that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs>
    ): Prisma__DepartmentClient<DepartmentGetPayload<T>>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DepartmentFindManyArgs>(
      args?: SelectSubset<T, DepartmentFindManyArgs>
    ): Prisma.PrismaPromise<Array<DepartmentGetPayload<T>>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
    **/
    create<T extends DepartmentCreateArgs>(
      args: SelectSubset<T, DepartmentCreateArgs>
    ): Prisma__DepartmentClient<DepartmentGetPayload<T>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
    **/
    delete<T extends DepartmentDeleteArgs>(
      args: SelectSubset<T, DepartmentDeleteArgs>
    ): Prisma__DepartmentClient<DepartmentGetPayload<T>>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DepartmentUpdateArgs>(
      args: SelectSubset<T, DepartmentUpdateArgs>
    ): Prisma__DepartmentClient<DepartmentGetPayload<T>>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DepartmentDeleteManyArgs>(
      args?: SelectSubset<T, DepartmentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DepartmentUpdateManyArgs>(
      args: SelectSubset<T, DepartmentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
    **/
    upsert<T extends DepartmentUpsertArgs>(
      args: SelectSubset<T, DepartmentUpsertArgs>
    ): Prisma__DepartmentClient<DepartmentGetPayload<T>>

    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DepartmentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    employees<T extends Department$employeesArgs= {}>(args?: Subset<T, Department$employeesArgs>): Prisma.PrismaPromise<Array<EmployeeGetPayload<T>>| Null>;

    departmentHeads<T extends Department$departmentHeadsArgs= {}>(args?: Subset<T, Department$departmentHeadsArgs>): Prisma.PrismaPromise<Array<DepartmentHeadGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Department base type for findUnique actions
   */
  export type DepartmentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUnique
   */
  export interface DepartmentFindUniqueArgs extends DepartmentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department base type for findFirst actions
   */
  export type DepartmentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: Enumerable<DepartmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: Enumerable<DepartmentScalarFieldEnum>
  }

  /**
   * Department findFirst
   */
  export interface DepartmentFindFirstArgs extends DepartmentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: Enumerable<DepartmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: Enumerable<DepartmentScalarFieldEnum>
  }


  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: Enumerable<DepartmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: Enumerable<DepartmentScalarFieldEnum>
  }


  /**
   * Department create
   */
  export type DepartmentCreateArgs = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }


  /**
   * Department update
   */
  export type DepartmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
  }


  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }


  /**
   * Department delete
   */
  export type DepartmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
  }


  /**
   * Department.employees
   */
  export type Department$employeesArgs = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude | null
    where?: EmployeeWhereInput
    orderBy?: Enumerable<EmployeeOrderByWithRelationInput>
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EmployeeScalarFieldEnum>
  }


  /**
   * Department.departmentHeads
   */
  export type Department$departmentHeadsArgs = {
    /**
     * Select specific fields to fetch from the DepartmentHead
     */
    select?: DepartmentHeadSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentHeadInclude | null
    where?: DepartmentHeadWhereInput
    orderBy?: Enumerable<DepartmentHeadOrderByWithRelationInput>
    cursor?: DepartmentHeadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DepartmentHeadScalarFieldEnum>
  }


  /**
   * Department without action
   */
  export type DepartmentArgs = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude | null
  }



  /**
   * Model DepartmentHead
   */


  export type AggregateDepartmentHead = {
    _count: DepartmentHeadCountAggregateOutputType | null
    _avg: DepartmentHeadAvgAggregateOutputType | null
    _sum: DepartmentHeadSumAggregateOutputType | null
    _min: DepartmentHeadMinAggregateOutputType | null
    _max: DepartmentHeadMaxAggregateOutputType | null
  }

  export type DepartmentHeadAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
    departmentId: number | null
  }

  export type DepartmentHeadSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
    departmentId: number | null
  }

  export type DepartmentHeadMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    departmentId: number | null
  }

  export type DepartmentHeadMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    departmentId: number | null
  }

  export type DepartmentHeadCountAggregateOutputType = {
    id: number
    employeeId: number
    departmentId: number
    _all: number
  }


  export type DepartmentHeadAvgAggregateInputType = {
    id?: true
    employeeId?: true
    departmentId?: true
  }

  export type DepartmentHeadSumAggregateInputType = {
    id?: true
    employeeId?: true
    departmentId?: true
  }

  export type DepartmentHeadMinAggregateInputType = {
    id?: true
    employeeId?: true
    departmentId?: true
  }

  export type DepartmentHeadMaxAggregateInputType = {
    id?: true
    employeeId?: true
    departmentId?: true
  }

  export type DepartmentHeadCountAggregateInputType = {
    id?: true
    employeeId?: true
    departmentId?: true
    _all?: true
  }

  export type DepartmentHeadAggregateArgs = {
    /**
     * Filter which DepartmentHead to aggregate.
     */
    where?: DepartmentHeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentHeads to fetch.
     */
    orderBy?: Enumerable<DepartmentHeadOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentHeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentHeads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentHeads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DepartmentHeads
    **/
    _count?: true | DepartmentHeadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentHeadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentHeadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentHeadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentHeadMaxAggregateInputType
  }

  export type GetDepartmentHeadAggregateType<T extends DepartmentHeadAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartmentHead]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartmentHead[P]>
      : GetScalarType<T[P], AggregateDepartmentHead[P]>
  }




  export type DepartmentHeadGroupByArgs = {
    where?: DepartmentHeadWhereInput
    orderBy?: Enumerable<DepartmentHeadOrderByWithAggregationInput>
    by: DepartmentHeadScalarFieldEnum[]
    having?: DepartmentHeadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentHeadCountAggregateInputType | true
    _avg?: DepartmentHeadAvgAggregateInputType
    _sum?: DepartmentHeadSumAggregateInputType
    _min?: DepartmentHeadMinAggregateInputType
    _max?: DepartmentHeadMaxAggregateInputType
  }


  export type DepartmentHeadGroupByOutputType = {
    id: number
    employeeId: number
    departmentId: number
    _count: DepartmentHeadCountAggregateOutputType | null
    _avg: DepartmentHeadAvgAggregateOutputType | null
    _sum: DepartmentHeadSumAggregateOutputType | null
    _min: DepartmentHeadMinAggregateOutputType | null
    _max: DepartmentHeadMaxAggregateOutputType | null
  }

  type GetDepartmentHeadGroupByPayload<T extends DepartmentHeadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DepartmentHeadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentHeadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentHeadGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentHeadGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentHeadSelect = {
    id?: boolean
    employeeId?: boolean
    departmentId?: boolean
    employee?: boolean | EmployeeArgs
    department?: boolean | DepartmentArgs
  }


  export type DepartmentHeadInclude = {
    employee?: boolean | EmployeeArgs
    department?: boolean | DepartmentArgs
  }

  export type DepartmentHeadGetPayload<S extends boolean | null | undefined | DepartmentHeadArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DepartmentHead :
    S extends undefined ? never :
    S extends { include: any } & (DepartmentHeadArgs | DepartmentHeadFindManyArgs)
    ? DepartmentHead  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'employee' ? EmployeeGetPayload<S['include'][P]> :
        P extends 'department' ? DepartmentGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DepartmentHeadArgs | DepartmentHeadFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'employee' ? EmployeeGetPayload<S['select'][P]> :
        P extends 'department' ? DepartmentGetPayload<S['select'][P]> :  P extends keyof DepartmentHead ? DepartmentHead[P] : never
  } 
      : DepartmentHead


  type DepartmentHeadCountArgs = 
    Omit<DepartmentHeadFindManyArgs, 'select' | 'include'> & {
      select?: DepartmentHeadCountAggregateInputType | true
    }

  export interface DepartmentHeadDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one DepartmentHead that matches the filter.
     * @param {DepartmentHeadFindUniqueArgs} args - Arguments to find a DepartmentHead
     * @example
     * // Get one DepartmentHead
     * const departmentHead = await prisma.departmentHead.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DepartmentHeadFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DepartmentHeadFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DepartmentHead'> extends True ? Prisma__DepartmentHeadClient<DepartmentHeadGetPayload<T>> : Prisma__DepartmentHeadClient<DepartmentHeadGetPayload<T> | null, null>

    /**
     * Find one DepartmentHead that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DepartmentHeadFindUniqueOrThrowArgs} args - Arguments to find a DepartmentHead
     * @example
     * // Get one DepartmentHead
     * const departmentHead = await prisma.departmentHead.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DepartmentHeadFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DepartmentHeadFindUniqueOrThrowArgs>
    ): Prisma__DepartmentHeadClient<DepartmentHeadGetPayload<T>>

    /**
     * Find the first DepartmentHead that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentHeadFindFirstArgs} args - Arguments to find a DepartmentHead
     * @example
     * // Get one DepartmentHead
     * const departmentHead = await prisma.departmentHead.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DepartmentHeadFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DepartmentHeadFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DepartmentHead'> extends True ? Prisma__DepartmentHeadClient<DepartmentHeadGetPayload<T>> : Prisma__DepartmentHeadClient<DepartmentHeadGetPayload<T> | null, null>

    /**
     * Find the first DepartmentHead that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentHeadFindFirstOrThrowArgs} args - Arguments to find a DepartmentHead
     * @example
     * // Get one DepartmentHead
     * const departmentHead = await prisma.departmentHead.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DepartmentHeadFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DepartmentHeadFindFirstOrThrowArgs>
    ): Prisma__DepartmentHeadClient<DepartmentHeadGetPayload<T>>

    /**
     * Find zero or more DepartmentHeads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentHeadFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DepartmentHeads
     * const departmentHeads = await prisma.departmentHead.findMany()
     * 
     * // Get first 10 DepartmentHeads
     * const departmentHeads = await prisma.departmentHead.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentHeadWithIdOnly = await prisma.departmentHead.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DepartmentHeadFindManyArgs>(
      args?: SelectSubset<T, DepartmentHeadFindManyArgs>
    ): Prisma.PrismaPromise<Array<DepartmentHeadGetPayload<T>>>

    /**
     * Create a DepartmentHead.
     * @param {DepartmentHeadCreateArgs} args - Arguments to create a DepartmentHead.
     * @example
     * // Create one DepartmentHead
     * const DepartmentHead = await prisma.departmentHead.create({
     *   data: {
     *     // ... data to create a DepartmentHead
     *   }
     * })
     * 
    **/
    create<T extends DepartmentHeadCreateArgs>(
      args: SelectSubset<T, DepartmentHeadCreateArgs>
    ): Prisma__DepartmentHeadClient<DepartmentHeadGetPayload<T>>

    /**
     * Delete a DepartmentHead.
     * @param {DepartmentHeadDeleteArgs} args - Arguments to delete one DepartmentHead.
     * @example
     * // Delete one DepartmentHead
     * const DepartmentHead = await prisma.departmentHead.delete({
     *   where: {
     *     // ... filter to delete one DepartmentHead
     *   }
     * })
     * 
    **/
    delete<T extends DepartmentHeadDeleteArgs>(
      args: SelectSubset<T, DepartmentHeadDeleteArgs>
    ): Prisma__DepartmentHeadClient<DepartmentHeadGetPayload<T>>

    /**
     * Update one DepartmentHead.
     * @param {DepartmentHeadUpdateArgs} args - Arguments to update one DepartmentHead.
     * @example
     * // Update one DepartmentHead
     * const departmentHead = await prisma.departmentHead.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DepartmentHeadUpdateArgs>(
      args: SelectSubset<T, DepartmentHeadUpdateArgs>
    ): Prisma__DepartmentHeadClient<DepartmentHeadGetPayload<T>>

    /**
     * Delete zero or more DepartmentHeads.
     * @param {DepartmentHeadDeleteManyArgs} args - Arguments to filter DepartmentHeads to delete.
     * @example
     * // Delete a few DepartmentHeads
     * const { count } = await prisma.departmentHead.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DepartmentHeadDeleteManyArgs>(
      args?: SelectSubset<T, DepartmentHeadDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentHeads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentHeadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DepartmentHeads
     * const departmentHead = await prisma.departmentHead.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DepartmentHeadUpdateManyArgs>(
      args: SelectSubset<T, DepartmentHeadUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DepartmentHead.
     * @param {DepartmentHeadUpsertArgs} args - Arguments to update or create a DepartmentHead.
     * @example
     * // Update or create a DepartmentHead
     * const departmentHead = await prisma.departmentHead.upsert({
     *   create: {
     *     // ... data to create a DepartmentHead
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DepartmentHead we want to update
     *   }
     * })
    **/
    upsert<T extends DepartmentHeadUpsertArgs>(
      args: SelectSubset<T, DepartmentHeadUpsertArgs>
    ): Prisma__DepartmentHeadClient<DepartmentHeadGetPayload<T>>

    /**
     * Count the number of DepartmentHeads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentHeadCountArgs} args - Arguments to filter DepartmentHeads to count.
     * @example
     * // Count the number of DepartmentHeads
     * const count = await prisma.departmentHead.count({
     *   where: {
     *     // ... the filter for the DepartmentHeads we want to count
     *   }
     * })
    **/
    count<T extends DepartmentHeadCountArgs>(
      args?: Subset<T, DepartmentHeadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentHeadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DepartmentHead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentHeadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentHeadAggregateArgs>(args: Subset<T, DepartmentHeadAggregateArgs>): Prisma.PrismaPromise<GetDepartmentHeadAggregateType<T>>

    /**
     * Group by DepartmentHead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentHeadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentHeadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentHeadGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentHeadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentHeadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentHeadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for DepartmentHead.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DepartmentHeadClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    employee<T extends EmployeeArgs= {}>(args?: Subset<T, EmployeeArgs>): Prisma__EmployeeClient<EmployeeGetPayload<T> | Null>;

    department<T extends DepartmentArgs= {}>(args?: Subset<T, DepartmentArgs>): Prisma__DepartmentClient<DepartmentGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * DepartmentHead base type for findUnique actions
   */
  export type DepartmentHeadFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the DepartmentHead
     */
    select?: DepartmentHeadSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentHeadInclude | null
    /**
     * Filter, which DepartmentHead to fetch.
     */
    where: DepartmentHeadWhereUniqueInput
  }

  /**
   * DepartmentHead findUnique
   */
  export interface DepartmentHeadFindUniqueArgs extends DepartmentHeadFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DepartmentHead findUniqueOrThrow
   */
  export type DepartmentHeadFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the DepartmentHead
     */
    select?: DepartmentHeadSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentHeadInclude | null
    /**
     * Filter, which DepartmentHead to fetch.
     */
    where: DepartmentHeadWhereUniqueInput
  }


  /**
   * DepartmentHead base type for findFirst actions
   */
  export type DepartmentHeadFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the DepartmentHead
     */
    select?: DepartmentHeadSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentHeadInclude | null
    /**
     * Filter, which DepartmentHead to fetch.
     */
    where?: DepartmentHeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentHeads to fetch.
     */
    orderBy?: Enumerable<DepartmentHeadOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentHeads.
     */
    cursor?: DepartmentHeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentHeads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentHeads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentHeads.
     */
    distinct?: Enumerable<DepartmentHeadScalarFieldEnum>
  }

  /**
   * DepartmentHead findFirst
   */
  export interface DepartmentHeadFindFirstArgs extends DepartmentHeadFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DepartmentHead findFirstOrThrow
   */
  export type DepartmentHeadFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the DepartmentHead
     */
    select?: DepartmentHeadSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentHeadInclude | null
    /**
     * Filter, which DepartmentHead to fetch.
     */
    where?: DepartmentHeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentHeads to fetch.
     */
    orderBy?: Enumerable<DepartmentHeadOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentHeads.
     */
    cursor?: DepartmentHeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentHeads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentHeads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentHeads.
     */
    distinct?: Enumerable<DepartmentHeadScalarFieldEnum>
  }


  /**
   * DepartmentHead findMany
   */
  export type DepartmentHeadFindManyArgs = {
    /**
     * Select specific fields to fetch from the DepartmentHead
     */
    select?: DepartmentHeadSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentHeadInclude | null
    /**
     * Filter, which DepartmentHeads to fetch.
     */
    where?: DepartmentHeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentHeads to fetch.
     */
    orderBy?: Enumerable<DepartmentHeadOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DepartmentHeads.
     */
    cursor?: DepartmentHeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentHeads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentHeads.
     */
    skip?: number
    distinct?: Enumerable<DepartmentHeadScalarFieldEnum>
  }


  /**
   * DepartmentHead create
   */
  export type DepartmentHeadCreateArgs = {
    /**
     * Select specific fields to fetch from the DepartmentHead
     */
    select?: DepartmentHeadSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentHeadInclude | null
    /**
     * The data needed to create a DepartmentHead.
     */
    data: XOR<DepartmentHeadCreateInput, DepartmentHeadUncheckedCreateInput>
  }


  /**
   * DepartmentHead update
   */
  export type DepartmentHeadUpdateArgs = {
    /**
     * Select specific fields to fetch from the DepartmentHead
     */
    select?: DepartmentHeadSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentHeadInclude | null
    /**
     * The data needed to update a DepartmentHead.
     */
    data: XOR<DepartmentHeadUpdateInput, DepartmentHeadUncheckedUpdateInput>
    /**
     * Choose, which DepartmentHead to update.
     */
    where: DepartmentHeadWhereUniqueInput
  }


  /**
   * DepartmentHead updateMany
   */
  export type DepartmentHeadUpdateManyArgs = {
    /**
     * The data used to update DepartmentHeads.
     */
    data: XOR<DepartmentHeadUpdateManyMutationInput, DepartmentHeadUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentHeads to update
     */
    where?: DepartmentHeadWhereInput
  }


  /**
   * DepartmentHead upsert
   */
  export type DepartmentHeadUpsertArgs = {
    /**
     * Select specific fields to fetch from the DepartmentHead
     */
    select?: DepartmentHeadSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentHeadInclude | null
    /**
     * The filter to search for the DepartmentHead to update in case it exists.
     */
    where: DepartmentHeadWhereUniqueInput
    /**
     * In case the DepartmentHead found by the `where` argument doesn't exist, create a new DepartmentHead with this data.
     */
    create: XOR<DepartmentHeadCreateInput, DepartmentHeadUncheckedCreateInput>
    /**
     * In case the DepartmentHead was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentHeadUpdateInput, DepartmentHeadUncheckedUpdateInput>
  }


  /**
   * DepartmentHead delete
   */
  export type DepartmentHeadDeleteArgs = {
    /**
     * Select specific fields to fetch from the DepartmentHead
     */
    select?: DepartmentHeadSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentHeadInclude | null
    /**
     * Filter which DepartmentHead to delete.
     */
    where: DepartmentHeadWhereUniqueInput
  }


  /**
   * DepartmentHead deleteMany
   */
  export type DepartmentHeadDeleteManyArgs = {
    /**
     * Filter which DepartmentHeads to delete
     */
    where?: DepartmentHeadWhereInput
  }


  /**
   * DepartmentHead without action
   */
  export type DepartmentHeadArgs = {
    /**
     * Select specific fields to fetch from the DepartmentHead
     */
    select?: DepartmentHeadSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentHeadInclude | null
  }



  /**
   * Model AttendanceRecord
   */


  export type AggregateAttendanceRecord = {
    _count: AttendanceRecordCountAggregateOutputType | null
    _avg: AttendanceRecordAvgAggregateOutputType | null
    _sum: AttendanceRecordSumAggregateOutputType | null
    _min: AttendanceRecordMinAggregateOutputType | null
    _max: AttendanceRecordMaxAggregateOutputType | null
  }

  export type AttendanceRecordAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type AttendanceRecordSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type AttendanceRecordMinAggregateOutputType = {
    id: number | null
    date: Date | null
    punchType: string | null
    timestamp: Date | null
    employeeId: number | null
  }

  export type AttendanceRecordMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    punchType: string | null
    timestamp: Date | null
    employeeId: number | null
  }

  export type AttendanceRecordCountAggregateOutputType = {
    id: number
    date: number
    punchType: number
    timestamp: number
    employeeId: number
    _all: number
  }


  export type AttendanceRecordAvgAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type AttendanceRecordSumAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type AttendanceRecordMinAggregateInputType = {
    id?: true
    date?: true
    punchType?: true
    timestamp?: true
    employeeId?: true
  }

  export type AttendanceRecordMaxAggregateInputType = {
    id?: true
    date?: true
    punchType?: true
    timestamp?: true
    employeeId?: true
  }

  export type AttendanceRecordCountAggregateInputType = {
    id?: true
    date?: true
    punchType?: true
    timestamp?: true
    employeeId?: true
    _all?: true
  }

  export type AttendanceRecordAggregateArgs = {
    /**
     * Filter which AttendanceRecord to aggregate.
     */
    where?: AttendanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceRecords to fetch.
     */
    orderBy?: Enumerable<AttendanceRecordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AttendanceRecords
    **/
    _count?: true | AttendanceRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceRecordMaxAggregateInputType
  }

  export type GetAttendanceRecordAggregateType<T extends AttendanceRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendanceRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendanceRecord[P]>
      : GetScalarType<T[P], AggregateAttendanceRecord[P]>
  }




  export type AttendanceRecordGroupByArgs = {
    where?: AttendanceRecordWhereInput
    orderBy?: Enumerable<AttendanceRecordOrderByWithAggregationInput>
    by: AttendanceRecordScalarFieldEnum[]
    having?: AttendanceRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceRecordCountAggregateInputType | true
    _avg?: AttendanceRecordAvgAggregateInputType
    _sum?: AttendanceRecordSumAggregateInputType
    _min?: AttendanceRecordMinAggregateInputType
    _max?: AttendanceRecordMaxAggregateInputType
  }


  export type AttendanceRecordGroupByOutputType = {
    id: number
    date: Date
    punchType: string
    timestamp: Date
    employeeId: number
    _count: AttendanceRecordCountAggregateOutputType | null
    _avg: AttendanceRecordAvgAggregateOutputType | null
    _sum: AttendanceRecordSumAggregateOutputType | null
    _min: AttendanceRecordMinAggregateOutputType | null
    _max: AttendanceRecordMaxAggregateOutputType | null
  }

  type GetAttendanceRecordGroupByPayload<T extends AttendanceRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AttendanceRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceRecordGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceRecordGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceRecordSelect = {
    id?: boolean
    date?: boolean
    punchType?: boolean
    timestamp?: boolean
    employeeId?: boolean
    employee?: boolean | EmployeeArgs
  }


  export type AttendanceRecordInclude = {
    employee?: boolean | EmployeeArgs
  }

  export type AttendanceRecordGetPayload<S extends boolean | null | undefined | AttendanceRecordArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? AttendanceRecord :
    S extends undefined ? never :
    S extends { include: any } & (AttendanceRecordArgs | AttendanceRecordFindManyArgs)
    ? AttendanceRecord  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'employee' ? EmployeeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AttendanceRecordArgs | AttendanceRecordFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'employee' ? EmployeeGetPayload<S['select'][P]> :  P extends keyof AttendanceRecord ? AttendanceRecord[P] : never
  } 
      : AttendanceRecord


  type AttendanceRecordCountArgs = 
    Omit<AttendanceRecordFindManyArgs, 'select' | 'include'> & {
      select?: AttendanceRecordCountAggregateInputType | true
    }

  export interface AttendanceRecordDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one AttendanceRecord that matches the filter.
     * @param {AttendanceRecordFindUniqueArgs} args - Arguments to find a AttendanceRecord
     * @example
     * // Get one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AttendanceRecordFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AttendanceRecordFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AttendanceRecord'> extends True ? Prisma__AttendanceRecordClient<AttendanceRecordGetPayload<T>> : Prisma__AttendanceRecordClient<AttendanceRecordGetPayload<T> | null, null>

    /**
     * Find one AttendanceRecord that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AttendanceRecordFindUniqueOrThrowArgs} args - Arguments to find a AttendanceRecord
     * @example
     * // Get one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AttendanceRecordFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AttendanceRecordFindUniqueOrThrowArgs>
    ): Prisma__AttendanceRecordClient<AttendanceRecordGetPayload<T>>

    /**
     * Find the first AttendanceRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordFindFirstArgs} args - Arguments to find a AttendanceRecord
     * @example
     * // Get one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AttendanceRecordFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AttendanceRecordFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AttendanceRecord'> extends True ? Prisma__AttendanceRecordClient<AttendanceRecordGetPayload<T>> : Prisma__AttendanceRecordClient<AttendanceRecordGetPayload<T> | null, null>

    /**
     * Find the first AttendanceRecord that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordFindFirstOrThrowArgs} args - Arguments to find a AttendanceRecord
     * @example
     * // Get one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AttendanceRecordFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AttendanceRecordFindFirstOrThrowArgs>
    ): Prisma__AttendanceRecordClient<AttendanceRecordGetPayload<T>>

    /**
     * Find zero or more AttendanceRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AttendanceRecords
     * const attendanceRecords = await prisma.attendanceRecord.findMany()
     * 
     * // Get first 10 AttendanceRecords
     * const attendanceRecords = await prisma.attendanceRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceRecordWithIdOnly = await prisma.attendanceRecord.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AttendanceRecordFindManyArgs>(
      args?: SelectSubset<T, AttendanceRecordFindManyArgs>
    ): Prisma.PrismaPromise<Array<AttendanceRecordGetPayload<T>>>

    /**
     * Create a AttendanceRecord.
     * @param {AttendanceRecordCreateArgs} args - Arguments to create a AttendanceRecord.
     * @example
     * // Create one AttendanceRecord
     * const AttendanceRecord = await prisma.attendanceRecord.create({
     *   data: {
     *     // ... data to create a AttendanceRecord
     *   }
     * })
     * 
    **/
    create<T extends AttendanceRecordCreateArgs>(
      args: SelectSubset<T, AttendanceRecordCreateArgs>
    ): Prisma__AttendanceRecordClient<AttendanceRecordGetPayload<T>>

    /**
     * Delete a AttendanceRecord.
     * @param {AttendanceRecordDeleteArgs} args - Arguments to delete one AttendanceRecord.
     * @example
     * // Delete one AttendanceRecord
     * const AttendanceRecord = await prisma.attendanceRecord.delete({
     *   where: {
     *     // ... filter to delete one AttendanceRecord
     *   }
     * })
     * 
    **/
    delete<T extends AttendanceRecordDeleteArgs>(
      args: SelectSubset<T, AttendanceRecordDeleteArgs>
    ): Prisma__AttendanceRecordClient<AttendanceRecordGetPayload<T>>

    /**
     * Update one AttendanceRecord.
     * @param {AttendanceRecordUpdateArgs} args - Arguments to update one AttendanceRecord.
     * @example
     * // Update one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AttendanceRecordUpdateArgs>(
      args: SelectSubset<T, AttendanceRecordUpdateArgs>
    ): Prisma__AttendanceRecordClient<AttendanceRecordGetPayload<T>>

    /**
     * Delete zero or more AttendanceRecords.
     * @param {AttendanceRecordDeleteManyArgs} args - Arguments to filter AttendanceRecords to delete.
     * @example
     * // Delete a few AttendanceRecords
     * const { count } = await prisma.attendanceRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AttendanceRecordDeleteManyArgs>(
      args?: SelectSubset<T, AttendanceRecordDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttendanceRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AttendanceRecords
     * const attendanceRecord = await prisma.attendanceRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AttendanceRecordUpdateManyArgs>(
      args: SelectSubset<T, AttendanceRecordUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AttendanceRecord.
     * @param {AttendanceRecordUpsertArgs} args - Arguments to update or create a AttendanceRecord.
     * @example
     * // Update or create a AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.upsert({
     *   create: {
     *     // ... data to create a AttendanceRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AttendanceRecord we want to update
     *   }
     * })
    **/
    upsert<T extends AttendanceRecordUpsertArgs>(
      args: SelectSubset<T, AttendanceRecordUpsertArgs>
    ): Prisma__AttendanceRecordClient<AttendanceRecordGetPayload<T>>

    /**
     * Count the number of AttendanceRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordCountArgs} args - Arguments to filter AttendanceRecords to count.
     * @example
     * // Count the number of AttendanceRecords
     * const count = await prisma.attendanceRecord.count({
     *   where: {
     *     // ... the filter for the AttendanceRecords we want to count
     *   }
     * })
    **/
    count<T extends AttendanceRecordCountArgs>(
      args?: Subset<T, AttendanceRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AttendanceRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceRecordAggregateArgs>(args: Subset<T, AttendanceRecordAggregateArgs>): Prisma.PrismaPromise<GetAttendanceRecordAggregateType<T>>

    /**
     * Group by AttendanceRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceRecordGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AttendanceRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AttendanceRecordClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    employee<T extends EmployeeArgs= {}>(args?: Subset<T, EmployeeArgs>): Prisma__EmployeeClient<EmployeeGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AttendanceRecord base type for findUnique actions
   */
  export type AttendanceRecordFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendanceRecordInclude | null
    /**
     * Filter, which AttendanceRecord to fetch.
     */
    where: AttendanceRecordWhereUniqueInput
  }

  /**
   * AttendanceRecord findUnique
   */
  export interface AttendanceRecordFindUniqueArgs extends AttendanceRecordFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AttendanceRecord findUniqueOrThrow
   */
  export type AttendanceRecordFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendanceRecordInclude | null
    /**
     * Filter, which AttendanceRecord to fetch.
     */
    where: AttendanceRecordWhereUniqueInput
  }


  /**
   * AttendanceRecord base type for findFirst actions
   */
  export type AttendanceRecordFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendanceRecordInclude | null
    /**
     * Filter, which AttendanceRecord to fetch.
     */
    where?: AttendanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceRecords to fetch.
     */
    orderBy?: Enumerable<AttendanceRecordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceRecords.
     */
    cursor?: AttendanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceRecords.
     */
    distinct?: Enumerable<AttendanceRecordScalarFieldEnum>
  }

  /**
   * AttendanceRecord findFirst
   */
  export interface AttendanceRecordFindFirstArgs extends AttendanceRecordFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AttendanceRecord findFirstOrThrow
   */
  export type AttendanceRecordFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendanceRecordInclude | null
    /**
     * Filter, which AttendanceRecord to fetch.
     */
    where?: AttendanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceRecords to fetch.
     */
    orderBy?: Enumerable<AttendanceRecordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceRecords.
     */
    cursor?: AttendanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceRecords.
     */
    distinct?: Enumerable<AttendanceRecordScalarFieldEnum>
  }


  /**
   * AttendanceRecord findMany
   */
  export type AttendanceRecordFindManyArgs = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendanceRecordInclude | null
    /**
     * Filter, which AttendanceRecords to fetch.
     */
    where?: AttendanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceRecords to fetch.
     */
    orderBy?: Enumerable<AttendanceRecordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AttendanceRecords.
     */
    cursor?: AttendanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceRecords.
     */
    skip?: number
    distinct?: Enumerable<AttendanceRecordScalarFieldEnum>
  }


  /**
   * AttendanceRecord create
   */
  export type AttendanceRecordCreateArgs = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendanceRecordInclude | null
    /**
     * The data needed to create a AttendanceRecord.
     */
    data: XOR<AttendanceRecordCreateInput, AttendanceRecordUncheckedCreateInput>
  }


  /**
   * AttendanceRecord update
   */
  export type AttendanceRecordUpdateArgs = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendanceRecordInclude | null
    /**
     * The data needed to update a AttendanceRecord.
     */
    data: XOR<AttendanceRecordUpdateInput, AttendanceRecordUncheckedUpdateInput>
    /**
     * Choose, which AttendanceRecord to update.
     */
    where: AttendanceRecordWhereUniqueInput
  }


  /**
   * AttendanceRecord updateMany
   */
  export type AttendanceRecordUpdateManyArgs = {
    /**
     * The data used to update AttendanceRecords.
     */
    data: XOR<AttendanceRecordUpdateManyMutationInput, AttendanceRecordUncheckedUpdateManyInput>
    /**
     * Filter which AttendanceRecords to update
     */
    where?: AttendanceRecordWhereInput
  }


  /**
   * AttendanceRecord upsert
   */
  export type AttendanceRecordUpsertArgs = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendanceRecordInclude | null
    /**
     * The filter to search for the AttendanceRecord to update in case it exists.
     */
    where: AttendanceRecordWhereUniqueInput
    /**
     * In case the AttendanceRecord found by the `where` argument doesn't exist, create a new AttendanceRecord with this data.
     */
    create: XOR<AttendanceRecordCreateInput, AttendanceRecordUncheckedCreateInput>
    /**
     * In case the AttendanceRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceRecordUpdateInput, AttendanceRecordUncheckedUpdateInput>
  }


  /**
   * AttendanceRecord delete
   */
  export type AttendanceRecordDeleteArgs = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendanceRecordInclude | null
    /**
     * Filter which AttendanceRecord to delete.
     */
    where: AttendanceRecordWhereUniqueInput
  }


  /**
   * AttendanceRecord deleteMany
   */
  export type AttendanceRecordDeleteManyArgs = {
    /**
     * Filter which AttendanceRecords to delete
     */
    where?: AttendanceRecordWhereInput
  }


  /**
   * AttendanceRecord without action
   */
  export type AttendanceRecordArgs = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AttendanceRecordInclude | null
  }



  /**
   * Model Exception
   */


  export type AggregateException = {
    _count: ExceptionCountAggregateOutputType | null
    _avg: ExceptionAvgAggregateOutputType | null
    _sum: ExceptionSumAggregateOutputType | null
    _min: ExceptionMinAggregateOutputType | null
    _max: ExceptionMaxAggregateOutputType | null
  }

  export type ExceptionAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type ExceptionSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type ExceptionMinAggregateOutputType = {
    id: number | null
    date: Date | null
    note: string | null
    employeeId: number | null
  }

  export type ExceptionMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    note: string | null
    employeeId: number | null
  }

  export type ExceptionCountAggregateOutputType = {
    id: number
    date: number
    note: number
    employeeId: number
    _all: number
  }


  export type ExceptionAvgAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type ExceptionSumAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type ExceptionMinAggregateInputType = {
    id?: true
    date?: true
    note?: true
    employeeId?: true
  }

  export type ExceptionMaxAggregateInputType = {
    id?: true
    date?: true
    note?: true
    employeeId?: true
  }

  export type ExceptionCountAggregateInputType = {
    id?: true
    date?: true
    note?: true
    employeeId?: true
    _all?: true
  }

  export type ExceptionAggregateArgs = {
    /**
     * Filter which Exception to aggregate.
     */
    where?: ExceptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exceptions to fetch.
     */
    orderBy?: Enumerable<ExceptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExceptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exceptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exceptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exceptions
    **/
    _count?: true | ExceptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExceptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExceptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExceptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExceptionMaxAggregateInputType
  }

  export type GetExceptionAggregateType<T extends ExceptionAggregateArgs> = {
        [P in keyof T & keyof AggregateException]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateException[P]>
      : GetScalarType<T[P], AggregateException[P]>
  }




  export type ExceptionGroupByArgs = {
    where?: ExceptionWhereInput
    orderBy?: Enumerable<ExceptionOrderByWithAggregationInput>
    by: ExceptionScalarFieldEnum[]
    having?: ExceptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExceptionCountAggregateInputType | true
    _avg?: ExceptionAvgAggregateInputType
    _sum?: ExceptionSumAggregateInputType
    _min?: ExceptionMinAggregateInputType
    _max?: ExceptionMaxAggregateInputType
  }


  export type ExceptionGroupByOutputType = {
    id: number
    date: Date
    note: string
    employeeId: number
    _count: ExceptionCountAggregateOutputType | null
    _avg: ExceptionAvgAggregateOutputType | null
    _sum: ExceptionSumAggregateOutputType | null
    _min: ExceptionMinAggregateOutputType | null
    _max: ExceptionMaxAggregateOutputType | null
  }

  type GetExceptionGroupByPayload<T extends ExceptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ExceptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExceptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExceptionGroupByOutputType[P]>
            : GetScalarType<T[P], ExceptionGroupByOutputType[P]>
        }
      >
    >


  export type ExceptionSelect = {
    id?: boolean
    date?: boolean
    note?: boolean
    employeeId?: boolean
    employee?: boolean | EmployeeArgs
  }


  export type ExceptionInclude = {
    employee?: boolean | EmployeeArgs
  }

  export type ExceptionGetPayload<S extends boolean | null | undefined | ExceptionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Exception :
    S extends undefined ? never :
    S extends { include: any } & (ExceptionArgs | ExceptionFindManyArgs)
    ? Exception  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'employee' ? EmployeeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ExceptionArgs | ExceptionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'employee' ? EmployeeGetPayload<S['select'][P]> :  P extends keyof Exception ? Exception[P] : never
  } 
      : Exception


  type ExceptionCountArgs = 
    Omit<ExceptionFindManyArgs, 'select' | 'include'> & {
      select?: ExceptionCountAggregateInputType | true
    }

  export interface ExceptionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Exception that matches the filter.
     * @param {ExceptionFindUniqueArgs} args - Arguments to find a Exception
     * @example
     * // Get one Exception
     * const exception = await prisma.exception.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExceptionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ExceptionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Exception'> extends True ? Prisma__ExceptionClient<ExceptionGetPayload<T>> : Prisma__ExceptionClient<ExceptionGetPayload<T> | null, null>

    /**
     * Find one Exception that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExceptionFindUniqueOrThrowArgs} args - Arguments to find a Exception
     * @example
     * // Get one Exception
     * const exception = await prisma.exception.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExceptionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ExceptionFindUniqueOrThrowArgs>
    ): Prisma__ExceptionClient<ExceptionGetPayload<T>>

    /**
     * Find the first Exception that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExceptionFindFirstArgs} args - Arguments to find a Exception
     * @example
     * // Get one Exception
     * const exception = await prisma.exception.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExceptionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ExceptionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Exception'> extends True ? Prisma__ExceptionClient<ExceptionGetPayload<T>> : Prisma__ExceptionClient<ExceptionGetPayload<T> | null, null>

    /**
     * Find the first Exception that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExceptionFindFirstOrThrowArgs} args - Arguments to find a Exception
     * @example
     * // Get one Exception
     * const exception = await prisma.exception.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExceptionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ExceptionFindFirstOrThrowArgs>
    ): Prisma__ExceptionClient<ExceptionGetPayload<T>>

    /**
     * Find zero or more Exceptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExceptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exceptions
     * const exceptions = await prisma.exception.findMany()
     * 
     * // Get first 10 Exceptions
     * const exceptions = await prisma.exception.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exceptionWithIdOnly = await prisma.exception.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExceptionFindManyArgs>(
      args?: SelectSubset<T, ExceptionFindManyArgs>
    ): Prisma.PrismaPromise<Array<ExceptionGetPayload<T>>>

    /**
     * Create a Exception.
     * @param {ExceptionCreateArgs} args - Arguments to create a Exception.
     * @example
     * // Create one Exception
     * const Exception = await prisma.exception.create({
     *   data: {
     *     // ... data to create a Exception
     *   }
     * })
     * 
    **/
    create<T extends ExceptionCreateArgs>(
      args: SelectSubset<T, ExceptionCreateArgs>
    ): Prisma__ExceptionClient<ExceptionGetPayload<T>>

    /**
     * Delete a Exception.
     * @param {ExceptionDeleteArgs} args - Arguments to delete one Exception.
     * @example
     * // Delete one Exception
     * const Exception = await prisma.exception.delete({
     *   where: {
     *     // ... filter to delete one Exception
     *   }
     * })
     * 
    **/
    delete<T extends ExceptionDeleteArgs>(
      args: SelectSubset<T, ExceptionDeleteArgs>
    ): Prisma__ExceptionClient<ExceptionGetPayload<T>>

    /**
     * Update one Exception.
     * @param {ExceptionUpdateArgs} args - Arguments to update one Exception.
     * @example
     * // Update one Exception
     * const exception = await prisma.exception.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExceptionUpdateArgs>(
      args: SelectSubset<T, ExceptionUpdateArgs>
    ): Prisma__ExceptionClient<ExceptionGetPayload<T>>

    /**
     * Delete zero or more Exceptions.
     * @param {ExceptionDeleteManyArgs} args - Arguments to filter Exceptions to delete.
     * @example
     * // Delete a few Exceptions
     * const { count } = await prisma.exception.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExceptionDeleteManyArgs>(
      args?: SelectSubset<T, ExceptionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exceptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExceptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exceptions
     * const exception = await prisma.exception.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExceptionUpdateManyArgs>(
      args: SelectSubset<T, ExceptionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exception.
     * @param {ExceptionUpsertArgs} args - Arguments to update or create a Exception.
     * @example
     * // Update or create a Exception
     * const exception = await prisma.exception.upsert({
     *   create: {
     *     // ... data to create a Exception
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exception we want to update
     *   }
     * })
    **/
    upsert<T extends ExceptionUpsertArgs>(
      args: SelectSubset<T, ExceptionUpsertArgs>
    ): Prisma__ExceptionClient<ExceptionGetPayload<T>>

    /**
     * Count the number of Exceptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExceptionCountArgs} args - Arguments to filter Exceptions to count.
     * @example
     * // Count the number of Exceptions
     * const count = await prisma.exception.count({
     *   where: {
     *     // ... the filter for the Exceptions we want to count
     *   }
     * })
    **/
    count<T extends ExceptionCountArgs>(
      args?: Subset<T, ExceptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExceptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exception.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExceptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExceptionAggregateArgs>(args: Subset<T, ExceptionAggregateArgs>): Prisma.PrismaPromise<GetExceptionAggregateType<T>>

    /**
     * Group by Exception.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExceptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExceptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExceptionGroupByArgs['orderBy'] }
        : { orderBy?: ExceptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExceptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExceptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Exception.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExceptionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    employee<T extends EmployeeArgs= {}>(args?: Subset<T, EmployeeArgs>): Prisma__EmployeeClient<EmployeeGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Exception base type for findUnique actions
   */
  export type ExceptionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Exception
     */
    select?: ExceptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExceptionInclude | null
    /**
     * Filter, which Exception to fetch.
     */
    where: ExceptionWhereUniqueInput
  }

  /**
   * Exception findUnique
   */
  export interface ExceptionFindUniqueArgs extends ExceptionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Exception findUniqueOrThrow
   */
  export type ExceptionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Exception
     */
    select?: ExceptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExceptionInclude | null
    /**
     * Filter, which Exception to fetch.
     */
    where: ExceptionWhereUniqueInput
  }


  /**
   * Exception base type for findFirst actions
   */
  export type ExceptionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Exception
     */
    select?: ExceptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExceptionInclude | null
    /**
     * Filter, which Exception to fetch.
     */
    where?: ExceptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exceptions to fetch.
     */
    orderBy?: Enumerable<ExceptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exceptions.
     */
    cursor?: ExceptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exceptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exceptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exceptions.
     */
    distinct?: Enumerable<ExceptionScalarFieldEnum>
  }

  /**
   * Exception findFirst
   */
  export interface ExceptionFindFirstArgs extends ExceptionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Exception findFirstOrThrow
   */
  export type ExceptionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Exception
     */
    select?: ExceptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExceptionInclude | null
    /**
     * Filter, which Exception to fetch.
     */
    where?: ExceptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exceptions to fetch.
     */
    orderBy?: Enumerable<ExceptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exceptions.
     */
    cursor?: ExceptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exceptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exceptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exceptions.
     */
    distinct?: Enumerable<ExceptionScalarFieldEnum>
  }


  /**
   * Exception findMany
   */
  export type ExceptionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Exception
     */
    select?: ExceptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExceptionInclude | null
    /**
     * Filter, which Exceptions to fetch.
     */
    where?: ExceptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exceptions to fetch.
     */
    orderBy?: Enumerable<ExceptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exceptions.
     */
    cursor?: ExceptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exceptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exceptions.
     */
    skip?: number
    distinct?: Enumerable<ExceptionScalarFieldEnum>
  }


  /**
   * Exception create
   */
  export type ExceptionCreateArgs = {
    /**
     * Select specific fields to fetch from the Exception
     */
    select?: ExceptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExceptionInclude | null
    /**
     * The data needed to create a Exception.
     */
    data: XOR<ExceptionCreateInput, ExceptionUncheckedCreateInput>
  }


  /**
   * Exception update
   */
  export type ExceptionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Exception
     */
    select?: ExceptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExceptionInclude | null
    /**
     * The data needed to update a Exception.
     */
    data: XOR<ExceptionUpdateInput, ExceptionUncheckedUpdateInput>
    /**
     * Choose, which Exception to update.
     */
    where: ExceptionWhereUniqueInput
  }


  /**
   * Exception updateMany
   */
  export type ExceptionUpdateManyArgs = {
    /**
     * The data used to update Exceptions.
     */
    data: XOR<ExceptionUpdateManyMutationInput, ExceptionUncheckedUpdateManyInput>
    /**
     * Filter which Exceptions to update
     */
    where?: ExceptionWhereInput
  }


  /**
   * Exception upsert
   */
  export type ExceptionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Exception
     */
    select?: ExceptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExceptionInclude | null
    /**
     * The filter to search for the Exception to update in case it exists.
     */
    where: ExceptionWhereUniqueInput
    /**
     * In case the Exception found by the `where` argument doesn't exist, create a new Exception with this data.
     */
    create: XOR<ExceptionCreateInput, ExceptionUncheckedCreateInput>
    /**
     * In case the Exception was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExceptionUpdateInput, ExceptionUncheckedUpdateInput>
  }


  /**
   * Exception delete
   */
  export type ExceptionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Exception
     */
    select?: ExceptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExceptionInclude | null
    /**
     * Filter which Exception to delete.
     */
    where: ExceptionWhereUniqueInput
  }


  /**
   * Exception deleteMany
   */
  export type ExceptionDeleteManyArgs = {
    /**
     * Filter which Exceptions to delete
     */
    where?: ExceptionWhereInput
  }


  /**
   * Exception without action
   */
  export type ExceptionArgs = {
    /**
     * Select specific fields to fetch from the Exception
     */
    select?: ExceptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExceptionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AttendanceRecordScalarFieldEnum: {
    id: 'id',
    date: 'date',
    punchType: 'punchType',
    timestamp: 'timestamp',
    employeeId: 'employeeId'
  };

  export type AttendanceRecordScalarFieldEnum = (typeof AttendanceRecordScalarFieldEnum)[keyof typeof AttendanceRecordScalarFieldEnum]


  export const DepartmentHeadScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    departmentId: 'departmentId'
  };

  export type DepartmentHeadScalarFieldEnum = (typeof DepartmentHeadScalarFieldEnum)[keyof typeof DepartmentHeadScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    isAdmin: 'isAdmin'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const ExceptionScalarFieldEnum: {
    id: 'id',
    date: 'date',
    note: 'note',
    employeeId: 'employeeId'
  };

  export type ExceptionScalarFieldEnum = (typeof ExceptionScalarFieldEnum)[keyof typeof ExceptionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type EmployeeWhereInput = {
    AND?: Enumerable<EmployeeWhereInput>
    OR?: Enumerable<EmployeeWhereInput>
    NOT?: Enumerable<EmployeeWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    isAdmin?: BoolFilter | boolean
    departments?: DepartmentListRelationFilter
    departmentHeads?: DepartmentHeadListRelationFilter
    attendanceRecords?: AttendanceRecordListRelationFilter
    exceptions?: ExceptionListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    departments?: DepartmentOrderByRelationAggregateInput
    departmentHeads?: DepartmentHeadOrderByRelationAggregateInput
    attendanceRecords?: AttendanceRecordOrderByRelationAggregateInput
    exceptions?: ExceptionOrderByRelationAggregateInput
  }

  export type EmployeeWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EmployeeScalarWhereWithAggregatesInput>
    OR?: Enumerable<EmployeeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EmployeeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    isAdmin?: BoolWithAggregatesFilter | boolean
  }

  export type DepartmentWhereInput = {
    AND?: Enumerable<DepartmentWhereInput>
    OR?: Enumerable<DepartmentWhereInput>
    NOT?: Enumerable<DepartmentWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    employees?: EmployeeListRelationFilter
    departmentHeads?: DepartmentHeadListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    employees?: EmployeeOrderByRelationAggregateInput
    departmentHeads?: DepartmentHeadOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DepartmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<DepartmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DepartmentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type DepartmentHeadWhereInput = {
    AND?: Enumerable<DepartmentHeadWhereInput>
    OR?: Enumerable<DepartmentHeadWhereInput>
    NOT?: Enumerable<DepartmentHeadWhereInput>
    id?: IntFilter | number
    employeeId?: IntFilter | number
    departmentId?: IntFilter | number
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
  }

  export type DepartmentHeadOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    departmentId?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
  }

  export type DepartmentHeadWhereUniqueInput = {
    id?: number
  }

  export type DepartmentHeadOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    departmentId?: SortOrder
    _count?: DepartmentHeadCountOrderByAggregateInput
    _avg?: DepartmentHeadAvgOrderByAggregateInput
    _max?: DepartmentHeadMaxOrderByAggregateInput
    _min?: DepartmentHeadMinOrderByAggregateInput
    _sum?: DepartmentHeadSumOrderByAggregateInput
  }

  export type DepartmentHeadScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DepartmentHeadScalarWhereWithAggregatesInput>
    OR?: Enumerable<DepartmentHeadScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DepartmentHeadScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    employeeId?: IntWithAggregatesFilter | number
    departmentId?: IntWithAggregatesFilter | number
  }

  export type AttendanceRecordWhereInput = {
    AND?: Enumerable<AttendanceRecordWhereInput>
    OR?: Enumerable<AttendanceRecordWhereInput>
    NOT?: Enumerable<AttendanceRecordWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    punchType?: StringFilter | string
    timestamp?: DateTimeFilter | Date | string
    employeeId?: IntFilter | number
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type AttendanceRecordOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    punchType?: SortOrder
    timestamp?: SortOrder
    employeeId?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type AttendanceRecordWhereUniqueInput = {
    id?: number
  }

  export type AttendanceRecordOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    punchType?: SortOrder
    timestamp?: SortOrder
    employeeId?: SortOrder
    _count?: AttendanceRecordCountOrderByAggregateInput
    _avg?: AttendanceRecordAvgOrderByAggregateInput
    _max?: AttendanceRecordMaxOrderByAggregateInput
    _min?: AttendanceRecordMinOrderByAggregateInput
    _sum?: AttendanceRecordSumOrderByAggregateInput
  }

  export type AttendanceRecordScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AttendanceRecordScalarWhereWithAggregatesInput>
    OR?: Enumerable<AttendanceRecordScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AttendanceRecordScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    punchType?: StringWithAggregatesFilter | string
    timestamp?: DateTimeWithAggregatesFilter | Date | string
    employeeId?: IntWithAggregatesFilter | number
  }

  export type ExceptionWhereInput = {
    AND?: Enumerable<ExceptionWhereInput>
    OR?: Enumerable<ExceptionWhereInput>
    NOT?: Enumerable<ExceptionWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    note?: StringFilter | string
    employeeId?: IntFilter | number
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type ExceptionOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    note?: SortOrder
    employeeId?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type ExceptionWhereUniqueInput = {
    id?: number
  }

  export type ExceptionOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    note?: SortOrder
    employeeId?: SortOrder
    _count?: ExceptionCountOrderByAggregateInput
    _avg?: ExceptionAvgOrderByAggregateInput
    _max?: ExceptionMaxOrderByAggregateInput
    _min?: ExceptionMinOrderByAggregateInput
    _sum?: ExceptionSumOrderByAggregateInput
  }

  export type ExceptionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ExceptionScalarWhereWithAggregatesInput>
    OR?: Enumerable<ExceptionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ExceptionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    note?: StringWithAggregatesFilter | string
    employeeId?: IntWithAggregatesFilter | number
  }

  export type EmployeeCreateInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isAdmin: boolean
    departments?: DepartmentCreateNestedManyWithoutEmployeesInput
    departmentHeads?: DepartmentHeadCreateNestedManyWithoutEmployeeInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutEmployeeInput
    exceptions?: ExceptionCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    isAdmin: boolean
    departments?: DepartmentUncheckedCreateNestedManyWithoutEmployeesInput
    departmentHeads?: DepartmentHeadUncheckedCreateNestedManyWithoutEmployeeInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutEmployeeInput
    exceptions?: ExceptionUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    departments?: DepartmentUpdateManyWithoutEmployeesNestedInput
    departmentHeads?: DepartmentHeadUpdateManyWithoutEmployeeNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutEmployeeNestedInput
    exceptions?: ExceptionUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    departments?: DepartmentUncheckedUpdateManyWithoutEmployeesNestedInput
    departmentHeads?: DepartmentHeadUncheckedUpdateManyWithoutEmployeeNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    exceptions?: ExceptionUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DepartmentCreateInput = {
    name: string
    employees?: EmployeeCreateNestedManyWithoutDepartmentsInput
    departmentHeads?: DepartmentHeadCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: number
    name: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutDepartmentsInput
    departmentHeads?: DepartmentHeadUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUpdateManyWithoutDepartmentsNestedInput
    departmentHeads?: DepartmentHeadUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutDepartmentsNestedInput
    departmentHeads?: DepartmentHeadUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentHeadCreateInput = {
    employee: EmployeeCreateNestedOneWithoutDepartmentHeadsInput
    department: DepartmentCreateNestedOneWithoutDepartmentHeadsInput
  }

  export type DepartmentHeadUncheckedCreateInput = {
    id?: number
    employeeId: number
    departmentId: number
  }

  export type DepartmentHeadUpdateInput = {
    employee?: EmployeeUpdateOneRequiredWithoutDepartmentHeadsNestedInput
    department?: DepartmentUpdateOneRequiredWithoutDepartmentHeadsNestedInput
  }

  export type DepartmentHeadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentHeadUpdateManyMutationInput = {

  }

  export type DepartmentHeadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
  }

  export type AttendanceRecordCreateInput = {
    date: Date | string
    punchType: string
    timestamp: Date | string
    employee: EmployeeCreateNestedOneWithoutAttendanceRecordsInput
  }

  export type AttendanceRecordUncheckedCreateInput = {
    id?: number
    date: Date | string
    punchType: string
    timestamp: Date | string
    employeeId: number
  }

  export type AttendanceRecordUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    punchType?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutAttendanceRecordsNestedInput
  }

  export type AttendanceRecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    punchType?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type AttendanceRecordUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    punchType?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    punchType?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type ExceptionCreateInput = {
    date: Date | string
    note: string
    employee: EmployeeCreateNestedOneWithoutExceptionsInput
  }

  export type ExceptionUncheckedCreateInput = {
    id?: number
    date: Date | string
    note: string
    employeeId: number
  }

  export type ExceptionUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUpdateOneRequiredWithoutExceptionsNestedInput
  }

  export type ExceptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: StringFieldUpdateOperationsInput | string
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type ExceptionUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type ExceptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: StringFieldUpdateOperationsInput | string
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type DepartmentHeadListRelationFilter = {
    every?: DepartmentHeadWhereInput
    some?: DepartmentHeadWhereInput
    none?: DepartmentHeadWhereInput
  }

  export type AttendanceRecordListRelationFilter = {
    every?: AttendanceRecordWhereInput
    some?: AttendanceRecordWhereInput
    none?: AttendanceRecordWhereInput
  }

  export type ExceptionListRelationFilter = {
    every?: ExceptionWhereInput
    some?: ExceptionWhereInput
    none?: ExceptionWhereInput
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentHeadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExceptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmployeeRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type DepartmentRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type DepartmentHeadCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    departmentId?: SortOrder
  }

  export type DepartmentHeadAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    departmentId?: SortOrder
  }

  export type DepartmentHeadMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    departmentId?: SortOrder
  }

  export type DepartmentHeadMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    departmentId?: SortOrder
  }

  export type DepartmentHeadSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    departmentId?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type AttendanceRecordCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    punchType?: SortOrder
    timestamp?: SortOrder
    employeeId?: SortOrder
  }

  export type AttendanceRecordAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type AttendanceRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    punchType?: SortOrder
    timestamp?: SortOrder
    employeeId?: SortOrder
  }

  export type AttendanceRecordMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    punchType?: SortOrder
    timestamp?: SortOrder
    employeeId?: SortOrder
  }

  export type AttendanceRecordSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ExceptionCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    note?: SortOrder
    employeeId?: SortOrder
  }

  export type ExceptionAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type ExceptionMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    note?: SortOrder
    employeeId?: SortOrder
  }

  export type ExceptionMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    note?: SortOrder
    employeeId?: SortOrder
  }

  export type ExceptionSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type DepartmentCreateNestedManyWithoutEmployeesInput = {
    create?: XOR<Enumerable<DepartmentCreateWithoutEmployeesInput>, Enumerable<DepartmentUncheckedCreateWithoutEmployeesInput>>
    connectOrCreate?: Enumerable<DepartmentCreateOrConnectWithoutEmployeesInput>
    connect?: Enumerable<DepartmentWhereUniqueInput>
  }

  export type DepartmentHeadCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<DepartmentHeadCreateWithoutEmployeeInput>, Enumerable<DepartmentHeadUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<DepartmentHeadCreateOrConnectWithoutEmployeeInput>
    connect?: Enumerable<DepartmentHeadWhereUniqueInput>
  }

  export type AttendanceRecordCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<AttendanceRecordCreateWithoutEmployeeInput>, Enumerable<AttendanceRecordUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<AttendanceRecordCreateOrConnectWithoutEmployeeInput>
    connect?: Enumerable<AttendanceRecordWhereUniqueInput>
  }

  export type ExceptionCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<ExceptionCreateWithoutEmployeeInput>, Enumerable<ExceptionUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<ExceptionCreateOrConnectWithoutEmployeeInput>
    connect?: Enumerable<ExceptionWhereUniqueInput>
  }

  export type DepartmentUncheckedCreateNestedManyWithoutEmployeesInput = {
    create?: XOR<Enumerable<DepartmentCreateWithoutEmployeesInput>, Enumerable<DepartmentUncheckedCreateWithoutEmployeesInput>>
    connectOrCreate?: Enumerable<DepartmentCreateOrConnectWithoutEmployeesInput>
    connect?: Enumerable<DepartmentWhereUniqueInput>
  }

  export type DepartmentHeadUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<DepartmentHeadCreateWithoutEmployeeInput>, Enumerable<DepartmentHeadUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<DepartmentHeadCreateOrConnectWithoutEmployeeInput>
    connect?: Enumerable<DepartmentHeadWhereUniqueInput>
  }

  export type AttendanceRecordUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<AttendanceRecordCreateWithoutEmployeeInput>, Enumerable<AttendanceRecordUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<AttendanceRecordCreateOrConnectWithoutEmployeeInput>
    connect?: Enumerable<AttendanceRecordWhereUniqueInput>
  }

  export type ExceptionUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<Enumerable<ExceptionCreateWithoutEmployeeInput>, Enumerable<ExceptionUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<ExceptionCreateOrConnectWithoutEmployeeInput>
    connect?: Enumerable<ExceptionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DepartmentUpdateManyWithoutEmployeesNestedInput = {
    create?: XOR<Enumerable<DepartmentCreateWithoutEmployeesInput>, Enumerable<DepartmentUncheckedCreateWithoutEmployeesInput>>
    connectOrCreate?: Enumerable<DepartmentCreateOrConnectWithoutEmployeesInput>
    upsert?: Enumerable<DepartmentUpsertWithWhereUniqueWithoutEmployeesInput>
    set?: Enumerable<DepartmentWhereUniqueInput>
    disconnect?: Enumerable<DepartmentWhereUniqueInput>
    delete?: Enumerable<DepartmentWhereUniqueInput>
    connect?: Enumerable<DepartmentWhereUniqueInput>
    update?: Enumerable<DepartmentUpdateWithWhereUniqueWithoutEmployeesInput>
    updateMany?: Enumerable<DepartmentUpdateManyWithWhereWithoutEmployeesInput>
    deleteMany?: Enumerable<DepartmentScalarWhereInput>
  }

  export type DepartmentHeadUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<Enumerable<DepartmentHeadCreateWithoutEmployeeInput>, Enumerable<DepartmentHeadUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<DepartmentHeadCreateOrConnectWithoutEmployeeInput>
    upsert?: Enumerable<DepartmentHeadUpsertWithWhereUniqueWithoutEmployeeInput>
    set?: Enumerable<DepartmentHeadWhereUniqueInput>
    disconnect?: Enumerable<DepartmentHeadWhereUniqueInput>
    delete?: Enumerable<DepartmentHeadWhereUniqueInput>
    connect?: Enumerable<DepartmentHeadWhereUniqueInput>
    update?: Enumerable<DepartmentHeadUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<DepartmentHeadUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<DepartmentHeadScalarWhereInput>
  }

  export type AttendanceRecordUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<Enumerable<AttendanceRecordCreateWithoutEmployeeInput>, Enumerable<AttendanceRecordUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<AttendanceRecordCreateOrConnectWithoutEmployeeInput>
    upsert?: Enumerable<AttendanceRecordUpsertWithWhereUniqueWithoutEmployeeInput>
    set?: Enumerable<AttendanceRecordWhereUniqueInput>
    disconnect?: Enumerable<AttendanceRecordWhereUniqueInput>
    delete?: Enumerable<AttendanceRecordWhereUniqueInput>
    connect?: Enumerable<AttendanceRecordWhereUniqueInput>
    update?: Enumerable<AttendanceRecordUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<AttendanceRecordUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<AttendanceRecordScalarWhereInput>
  }

  export type ExceptionUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<Enumerable<ExceptionCreateWithoutEmployeeInput>, Enumerable<ExceptionUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<ExceptionCreateOrConnectWithoutEmployeeInput>
    upsert?: Enumerable<ExceptionUpsertWithWhereUniqueWithoutEmployeeInput>
    set?: Enumerable<ExceptionWhereUniqueInput>
    disconnect?: Enumerable<ExceptionWhereUniqueInput>
    delete?: Enumerable<ExceptionWhereUniqueInput>
    connect?: Enumerable<ExceptionWhereUniqueInput>
    update?: Enumerable<ExceptionUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<ExceptionUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<ExceptionScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DepartmentUncheckedUpdateManyWithoutEmployeesNestedInput = {
    create?: XOR<Enumerable<DepartmentCreateWithoutEmployeesInput>, Enumerable<DepartmentUncheckedCreateWithoutEmployeesInput>>
    connectOrCreate?: Enumerable<DepartmentCreateOrConnectWithoutEmployeesInput>
    upsert?: Enumerable<DepartmentUpsertWithWhereUniqueWithoutEmployeesInput>
    set?: Enumerable<DepartmentWhereUniqueInput>
    disconnect?: Enumerable<DepartmentWhereUniqueInput>
    delete?: Enumerable<DepartmentWhereUniqueInput>
    connect?: Enumerable<DepartmentWhereUniqueInput>
    update?: Enumerable<DepartmentUpdateWithWhereUniqueWithoutEmployeesInput>
    updateMany?: Enumerable<DepartmentUpdateManyWithWhereWithoutEmployeesInput>
    deleteMany?: Enumerable<DepartmentScalarWhereInput>
  }

  export type DepartmentHeadUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<Enumerable<DepartmentHeadCreateWithoutEmployeeInput>, Enumerable<DepartmentHeadUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<DepartmentHeadCreateOrConnectWithoutEmployeeInput>
    upsert?: Enumerable<DepartmentHeadUpsertWithWhereUniqueWithoutEmployeeInput>
    set?: Enumerable<DepartmentHeadWhereUniqueInput>
    disconnect?: Enumerable<DepartmentHeadWhereUniqueInput>
    delete?: Enumerable<DepartmentHeadWhereUniqueInput>
    connect?: Enumerable<DepartmentHeadWhereUniqueInput>
    update?: Enumerable<DepartmentHeadUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<DepartmentHeadUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<DepartmentHeadScalarWhereInput>
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<Enumerable<AttendanceRecordCreateWithoutEmployeeInput>, Enumerable<AttendanceRecordUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<AttendanceRecordCreateOrConnectWithoutEmployeeInput>
    upsert?: Enumerable<AttendanceRecordUpsertWithWhereUniqueWithoutEmployeeInput>
    set?: Enumerable<AttendanceRecordWhereUniqueInput>
    disconnect?: Enumerable<AttendanceRecordWhereUniqueInput>
    delete?: Enumerable<AttendanceRecordWhereUniqueInput>
    connect?: Enumerable<AttendanceRecordWhereUniqueInput>
    update?: Enumerable<AttendanceRecordUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<AttendanceRecordUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<AttendanceRecordScalarWhereInput>
  }

  export type ExceptionUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<Enumerable<ExceptionCreateWithoutEmployeeInput>, Enumerable<ExceptionUncheckedCreateWithoutEmployeeInput>>
    connectOrCreate?: Enumerable<ExceptionCreateOrConnectWithoutEmployeeInput>
    upsert?: Enumerable<ExceptionUpsertWithWhereUniqueWithoutEmployeeInput>
    set?: Enumerable<ExceptionWhereUniqueInput>
    disconnect?: Enumerable<ExceptionWhereUniqueInput>
    delete?: Enumerable<ExceptionWhereUniqueInput>
    connect?: Enumerable<ExceptionWhereUniqueInput>
    update?: Enumerable<ExceptionUpdateWithWhereUniqueWithoutEmployeeInput>
    updateMany?: Enumerable<ExceptionUpdateManyWithWhereWithoutEmployeeInput>
    deleteMany?: Enumerable<ExceptionScalarWhereInput>
  }

  export type EmployeeCreateNestedManyWithoutDepartmentsInput = {
    create?: XOR<Enumerable<EmployeeCreateWithoutDepartmentsInput>, Enumerable<EmployeeUncheckedCreateWithoutDepartmentsInput>>
    connectOrCreate?: Enumerable<EmployeeCreateOrConnectWithoutDepartmentsInput>
    connect?: Enumerable<EmployeeWhereUniqueInput>
  }

  export type DepartmentHeadCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<Enumerable<DepartmentHeadCreateWithoutDepartmentInput>, Enumerable<DepartmentHeadUncheckedCreateWithoutDepartmentInput>>
    connectOrCreate?: Enumerable<DepartmentHeadCreateOrConnectWithoutDepartmentInput>
    connect?: Enumerable<DepartmentHeadWhereUniqueInput>
  }

  export type EmployeeUncheckedCreateNestedManyWithoutDepartmentsInput = {
    create?: XOR<Enumerable<EmployeeCreateWithoutDepartmentsInput>, Enumerable<EmployeeUncheckedCreateWithoutDepartmentsInput>>
    connectOrCreate?: Enumerable<EmployeeCreateOrConnectWithoutDepartmentsInput>
    connect?: Enumerable<EmployeeWhereUniqueInput>
  }

  export type DepartmentHeadUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<Enumerable<DepartmentHeadCreateWithoutDepartmentInput>, Enumerable<DepartmentHeadUncheckedCreateWithoutDepartmentInput>>
    connectOrCreate?: Enumerable<DepartmentHeadCreateOrConnectWithoutDepartmentInput>
    connect?: Enumerable<DepartmentHeadWhereUniqueInput>
  }

  export type EmployeeUpdateManyWithoutDepartmentsNestedInput = {
    create?: XOR<Enumerable<EmployeeCreateWithoutDepartmentsInput>, Enumerable<EmployeeUncheckedCreateWithoutDepartmentsInput>>
    connectOrCreate?: Enumerable<EmployeeCreateOrConnectWithoutDepartmentsInput>
    upsert?: Enumerable<EmployeeUpsertWithWhereUniqueWithoutDepartmentsInput>
    set?: Enumerable<EmployeeWhereUniqueInput>
    disconnect?: Enumerable<EmployeeWhereUniqueInput>
    delete?: Enumerable<EmployeeWhereUniqueInput>
    connect?: Enumerable<EmployeeWhereUniqueInput>
    update?: Enumerable<EmployeeUpdateWithWhereUniqueWithoutDepartmentsInput>
    updateMany?: Enumerable<EmployeeUpdateManyWithWhereWithoutDepartmentsInput>
    deleteMany?: Enumerable<EmployeeScalarWhereInput>
  }

  export type DepartmentHeadUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<Enumerable<DepartmentHeadCreateWithoutDepartmentInput>, Enumerable<DepartmentHeadUncheckedCreateWithoutDepartmentInput>>
    connectOrCreate?: Enumerable<DepartmentHeadCreateOrConnectWithoutDepartmentInput>
    upsert?: Enumerable<DepartmentHeadUpsertWithWhereUniqueWithoutDepartmentInput>
    set?: Enumerable<DepartmentHeadWhereUniqueInput>
    disconnect?: Enumerable<DepartmentHeadWhereUniqueInput>
    delete?: Enumerable<DepartmentHeadWhereUniqueInput>
    connect?: Enumerable<DepartmentHeadWhereUniqueInput>
    update?: Enumerable<DepartmentHeadUpdateWithWhereUniqueWithoutDepartmentInput>
    updateMany?: Enumerable<DepartmentHeadUpdateManyWithWhereWithoutDepartmentInput>
    deleteMany?: Enumerable<DepartmentHeadScalarWhereInput>
  }

  export type EmployeeUncheckedUpdateManyWithoutDepartmentsNestedInput = {
    create?: XOR<Enumerable<EmployeeCreateWithoutDepartmentsInput>, Enumerable<EmployeeUncheckedCreateWithoutDepartmentsInput>>
    connectOrCreate?: Enumerable<EmployeeCreateOrConnectWithoutDepartmentsInput>
    upsert?: Enumerable<EmployeeUpsertWithWhereUniqueWithoutDepartmentsInput>
    set?: Enumerable<EmployeeWhereUniqueInput>
    disconnect?: Enumerable<EmployeeWhereUniqueInput>
    delete?: Enumerable<EmployeeWhereUniqueInput>
    connect?: Enumerable<EmployeeWhereUniqueInput>
    update?: Enumerable<EmployeeUpdateWithWhereUniqueWithoutDepartmentsInput>
    updateMany?: Enumerable<EmployeeUpdateManyWithWhereWithoutDepartmentsInput>
    deleteMany?: Enumerable<EmployeeScalarWhereInput>
  }

  export type DepartmentHeadUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<Enumerable<DepartmentHeadCreateWithoutDepartmentInput>, Enumerable<DepartmentHeadUncheckedCreateWithoutDepartmentInput>>
    connectOrCreate?: Enumerable<DepartmentHeadCreateOrConnectWithoutDepartmentInput>
    upsert?: Enumerable<DepartmentHeadUpsertWithWhereUniqueWithoutDepartmentInput>
    set?: Enumerable<DepartmentHeadWhereUniqueInput>
    disconnect?: Enumerable<DepartmentHeadWhereUniqueInput>
    delete?: Enumerable<DepartmentHeadWhereUniqueInput>
    connect?: Enumerable<DepartmentHeadWhereUniqueInput>
    update?: Enumerable<DepartmentHeadUpdateWithWhereUniqueWithoutDepartmentInput>
    updateMany?: Enumerable<DepartmentHeadUpdateManyWithWhereWithoutDepartmentInput>
    deleteMany?: Enumerable<DepartmentHeadScalarWhereInput>
  }

  export type EmployeeCreateNestedOneWithoutDepartmentHeadsInput = {
    create?: XOR<EmployeeCreateWithoutDepartmentHeadsInput, EmployeeUncheckedCreateWithoutDepartmentHeadsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDepartmentHeadsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutDepartmentHeadsInput = {
    create?: XOR<DepartmentCreateWithoutDepartmentHeadsInput, DepartmentUncheckedCreateWithoutDepartmentHeadsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutDepartmentHeadsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutDepartmentHeadsNestedInput = {
    create?: XOR<EmployeeCreateWithoutDepartmentHeadsInput, EmployeeUncheckedCreateWithoutDepartmentHeadsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDepartmentHeadsInput
    upsert?: EmployeeUpsertWithoutDepartmentHeadsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<EmployeeUpdateWithoutDepartmentHeadsInput, EmployeeUncheckedUpdateWithoutDepartmentHeadsInput>
  }

  export type DepartmentUpdateOneRequiredWithoutDepartmentHeadsNestedInput = {
    create?: XOR<DepartmentCreateWithoutDepartmentHeadsInput, DepartmentUncheckedCreateWithoutDepartmentHeadsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutDepartmentHeadsInput
    upsert?: DepartmentUpsertWithoutDepartmentHeadsInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<DepartmentUpdateWithoutDepartmentHeadsInput, DepartmentUncheckedUpdateWithoutDepartmentHeadsInput>
  }

  export type EmployeeCreateNestedOneWithoutAttendanceRecordsInput = {
    create?: XOR<EmployeeCreateWithoutAttendanceRecordsInput, EmployeeUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAttendanceRecordsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EmployeeUpdateOneRequiredWithoutAttendanceRecordsNestedInput = {
    create?: XOR<EmployeeCreateWithoutAttendanceRecordsInput, EmployeeUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAttendanceRecordsInput
    upsert?: EmployeeUpsertWithoutAttendanceRecordsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<EmployeeUpdateWithoutAttendanceRecordsInput, EmployeeUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type EmployeeCreateNestedOneWithoutExceptionsInput = {
    create?: XOR<EmployeeCreateWithoutExceptionsInput, EmployeeUncheckedCreateWithoutExceptionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutExceptionsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutExceptionsNestedInput = {
    create?: XOR<EmployeeCreateWithoutExceptionsInput, EmployeeUncheckedCreateWithoutExceptionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutExceptionsInput
    upsert?: EmployeeUpsertWithoutExceptionsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<EmployeeUpdateWithoutExceptionsInput, EmployeeUncheckedUpdateWithoutExceptionsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DepartmentCreateWithoutEmployeesInput = {
    name: string
    departmentHeads?: DepartmentHeadCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutEmployeesInput = {
    id?: number
    name: string
    departmentHeads?: DepartmentHeadUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutEmployeesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutEmployeesInput, DepartmentUncheckedCreateWithoutEmployeesInput>
  }

  export type DepartmentHeadCreateWithoutEmployeeInput = {
    department: DepartmentCreateNestedOneWithoutDepartmentHeadsInput
  }

  export type DepartmentHeadUncheckedCreateWithoutEmployeeInput = {
    id?: number
    departmentId: number
  }

  export type DepartmentHeadCreateOrConnectWithoutEmployeeInput = {
    where: DepartmentHeadWhereUniqueInput
    create: XOR<DepartmentHeadCreateWithoutEmployeeInput, DepartmentHeadUncheckedCreateWithoutEmployeeInput>
  }

  export type AttendanceRecordCreateWithoutEmployeeInput = {
    date: Date | string
    punchType: string
    timestamp: Date | string
  }

  export type AttendanceRecordUncheckedCreateWithoutEmployeeInput = {
    id?: number
    date: Date | string
    punchType: string
    timestamp: Date | string
  }

  export type AttendanceRecordCreateOrConnectWithoutEmployeeInput = {
    where: AttendanceRecordWhereUniqueInput
    create: XOR<AttendanceRecordCreateWithoutEmployeeInput, AttendanceRecordUncheckedCreateWithoutEmployeeInput>
  }

  export type ExceptionCreateWithoutEmployeeInput = {
    date: Date | string
    note: string
  }

  export type ExceptionUncheckedCreateWithoutEmployeeInput = {
    id?: number
    date: Date | string
    note: string
  }

  export type ExceptionCreateOrConnectWithoutEmployeeInput = {
    where: ExceptionWhereUniqueInput
    create: XOR<ExceptionCreateWithoutEmployeeInput, ExceptionUncheckedCreateWithoutEmployeeInput>
  }

  export type DepartmentUpsertWithWhereUniqueWithoutEmployeesInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutEmployeesInput, DepartmentUncheckedUpdateWithoutEmployeesInput>
    create: XOR<DepartmentCreateWithoutEmployeesInput, DepartmentUncheckedCreateWithoutEmployeesInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutEmployeesInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutEmployeesInput, DepartmentUncheckedUpdateWithoutEmployeesInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutEmployeesInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutDepartmentsInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: Enumerable<DepartmentScalarWhereInput>
    OR?: Enumerable<DepartmentScalarWhereInput>
    NOT?: Enumerable<DepartmentScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type DepartmentHeadUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: DepartmentHeadWhereUniqueInput
    update: XOR<DepartmentHeadUpdateWithoutEmployeeInput, DepartmentHeadUncheckedUpdateWithoutEmployeeInput>
    create: XOR<DepartmentHeadCreateWithoutEmployeeInput, DepartmentHeadUncheckedCreateWithoutEmployeeInput>
  }

  export type DepartmentHeadUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: DepartmentHeadWhereUniqueInput
    data: XOR<DepartmentHeadUpdateWithoutEmployeeInput, DepartmentHeadUncheckedUpdateWithoutEmployeeInput>
  }

  export type DepartmentHeadUpdateManyWithWhereWithoutEmployeeInput = {
    where: DepartmentHeadScalarWhereInput
    data: XOR<DepartmentHeadUpdateManyMutationInput, DepartmentHeadUncheckedUpdateManyWithoutDepartmentHeadsInput>
  }

  export type DepartmentHeadScalarWhereInput = {
    AND?: Enumerable<DepartmentHeadScalarWhereInput>
    OR?: Enumerable<DepartmentHeadScalarWhereInput>
    NOT?: Enumerable<DepartmentHeadScalarWhereInput>
    id?: IntFilter | number
    employeeId?: IntFilter | number
    departmentId?: IntFilter | number
  }

  export type AttendanceRecordUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: AttendanceRecordWhereUniqueInput
    update: XOR<AttendanceRecordUpdateWithoutEmployeeInput, AttendanceRecordUncheckedUpdateWithoutEmployeeInput>
    create: XOR<AttendanceRecordCreateWithoutEmployeeInput, AttendanceRecordUncheckedCreateWithoutEmployeeInput>
  }

  export type AttendanceRecordUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: AttendanceRecordWhereUniqueInput
    data: XOR<AttendanceRecordUpdateWithoutEmployeeInput, AttendanceRecordUncheckedUpdateWithoutEmployeeInput>
  }

  export type AttendanceRecordUpdateManyWithWhereWithoutEmployeeInput = {
    where: AttendanceRecordScalarWhereInput
    data: XOR<AttendanceRecordUpdateManyMutationInput, AttendanceRecordUncheckedUpdateManyWithoutAttendanceRecordsInput>
  }

  export type AttendanceRecordScalarWhereInput = {
    AND?: Enumerable<AttendanceRecordScalarWhereInput>
    OR?: Enumerable<AttendanceRecordScalarWhereInput>
    NOT?: Enumerable<AttendanceRecordScalarWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    punchType?: StringFilter | string
    timestamp?: DateTimeFilter | Date | string
    employeeId?: IntFilter | number
  }

  export type ExceptionUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: ExceptionWhereUniqueInput
    update: XOR<ExceptionUpdateWithoutEmployeeInput, ExceptionUncheckedUpdateWithoutEmployeeInput>
    create: XOR<ExceptionCreateWithoutEmployeeInput, ExceptionUncheckedCreateWithoutEmployeeInput>
  }

  export type ExceptionUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: ExceptionWhereUniqueInput
    data: XOR<ExceptionUpdateWithoutEmployeeInput, ExceptionUncheckedUpdateWithoutEmployeeInput>
  }

  export type ExceptionUpdateManyWithWhereWithoutEmployeeInput = {
    where: ExceptionScalarWhereInput
    data: XOR<ExceptionUpdateManyMutationInput, ExceptionUncheckedUpdateManyWithoutExceptionsInput>
  }

  export type ExceptionScalarWhereInput = {
    AND?: Enumerable<ExceptionScalarWhereInput>
    OR?: Enumerable<ExceptionScalarWhereInput>
    NOT?: Enumerable<ExceptionScalarWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    note?: StringFilter | string
    employeeId?: IntFilter | number
  }

  export type EmployeeCreateWithoutDepartmentsInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isAdmin: boolean
    departmentHeads?: DepartmentHeadCreateNestedManyWithoutEmployeeInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutEmployeeInput
    exceptions?: ExceptionCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDepartmentsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    isAdmin: boolean
    departmentHeads?: DepartmentHeadUncheckedCreateNestedManyWithoutEmployeeInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutEmployeeInput
    exceptions?: ExceptionUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDepartmentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDepartmentsInput, EmployeeUncheckedCreateWithoutDepartmentsInput>
  }

  export type DepartmentHeadCreateWithoutDepartmentInput = {
    employee: EmployeeCreateNestedOneWithoutDepartmentHeadsInput
  }

  export type DepartmentHeadUncheckedCreateWithoutDepartmentInput = {
    id?: number
    employeeId: number
  }

  export type DepartmentHeadCreateOrConnectWithoutDepartmentInput = {
    where: DepartmentHeadWhereUniqueInput
    create: XOR<DepartmentHeadCreateWithoutDepartmentInput, DepartmentHeadUncheckedCreateWithoutDepartmentInput>
  }

  export type EmployeeUpsertWithWhereUniqueWithoutDepartmentsInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutDepartmentsInput, EmployeeUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<EmployeeCreateWithoutDepartmentsInput, EmployeeUncheckedCreateWithoutDepartmentsInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutDepartmentsInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutDepartmentsInput, EmployeeUncheckedUpdateWithoutDepartmentsInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutDepartmentsInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutEmployeesInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: Enumerable<EmployeeScalarWhereInput>
    OR?: Enumerable<EmployeeScalarWhereInput>
    NOT?: Enumerable<EmployeeScalarWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    isAdmin?: BoolFilter | boolean
  }

  export type DepartmentHeadUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: DepartmentHeadWhereUniqueInput
    update: XOR<DepartmentHeadUpdateWithoutDepartmentInput, DepartmentHeadUncheckedUpdateWithoutDepartmentInput>
    create: XOR<DepartmentHeadCreateWithoutDepartmentInput, DepartmentHeadUncheckedCreateWithoutDepartmentInput>
  }

  export type DepartmentHeadUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: DepartmentHeadWhereUniqueInput
    data: XOR<DepartmentHeadUpdateWithoutDepartmentInput, DepartmentHeadUncheckedUpdateWithoutDepartmentInput>
  }

  export type DepartmentHeadUpdateManyWithWhereWithoutDepartmentInput = {
    where: DepartmentHeadScalarWhereInput
    data: XOR<DepartmentHeadUpdateManyMutationInput, DepartmentHeadUncheckedUpdateManyWithoutDepartmentHeadsInput>
  }

  export type EmployeeCreateWithoutDepartmentHeadsInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isAdmin: boolean
    departments?: DepartmentCreateNestedManyWithoutEmployeesInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutEmployeeInput
    exceptions?: ExceptionCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDepartmentHeadsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    isAdmin: boolean
    departments?: DepartmentUncheckedCreateNestedManyWithoutEmployeesInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutEmployeeInput
    exceptions?: ExceptionUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDepartmentHeadsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDepartmentHeadsInput, EmployeeUncheckedCreateWithoutDepartmentHeadsInput>
  }

  export type DepartmentCreateWithoutDepartmentHeadsInput = {
    name: string
    employees?: EmployeeCreateNestedManyWithoutDepartmentsInput
  }

  export type DepartmentUncheckedCreateWithoutDepartmentHeadsInput = {
    id?: number
    name: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutDepartmentsInput
  }

  export type DepartmentCreateOrConnectWithoutDepartmentHeadsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutDepartmentHeadsInput, DepartmentUncheckedCreateWithoutDepartmentHeadsInput>
  }

  export type EmployeeUpsertWithoutDepartmentHeadsInput = {
    update: XOR<EmployeeUpdateWithoutDepartmentHeadsInput, EmployeeUncheckedUpdateWithoutDepartmentHeadsInput>
    create: XOR<EmployeeCreateWithoutDepartmentHeadsInput, EmployeeUncheckedCreateWithoutDepartmentHeadsInput>
  }

  export type EmployeeUpdateWithoutDepartmentHeadsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    departments?: DepartmentUpdateManyWithoutEmployeesNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutEmployeeNestedInput
    exceptions?: ExceptionUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDepartmentHeadsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    departments?: DepartmentUncheckedUpdateManyWithoutEmployeesNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    exceptions?: ExceptionUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type DepartmentUpsertWithoutDepartmentHeadsInput = {
    update: XOR<DepartmentUpdateWithoutDepartmentHeadsInput, DepartmentUncheckedUpdateWithoutDepartmentHeadsInput>
    create: XOR<DepartmentCreateWithoutDepartmentHeadsInput, DepartmentUncheckedCreateWithoutDepartmentHeadsInput>
  }

  export type DepartmentUpdateWithoutDepartmentHeadsInput = {
    name?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUpdateManyWithoutDepartmentsNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutDepartmentHeadsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutDepartmentsNestedInput
  }

  export type EmployeeCreateWithoutAttendanceRecordsInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isAdmin: boolean
    departments?: DepartmentCreateNestedManyWithoutEmployeesInput
    departmentHeads?: DepartmentHeadCreateNestedManyWithoutEmployeeInput
    exceptions?: ExceptionCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutAttendanceRecordsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    isAdmin: boolean
    departments?: DepartmentUncheckedCreateNestedManyWithoutEmployeesInput
    departmentHeads?: DepartmentHeadUncheckedCreateNestedManyWithoutEmployeeInput
    exceptions?: ExceptionUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutAttendanceRecordsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutAttendanceRecordsInput, EmployeeUncheckedCreateWithoutAttendanceRecordsInput>
  }

  export type EmployeeUpsertWithoutAttendanceRecordsInput = {
    update: XOR<EmployeeUpdateWithoutAttendanceRecordsInput, EmployeeUncheckedUpdateWithoutAttendanceRecordsInput>
    create: XOR<EmployeeCreateWithoutAttendanceRecordsInput, EmployeeUncheckedCreateWithoutAttendanceRecordsInput>
  }

  export type EmployeeUpdateWithoutAttendanceRecordsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    departments?: DepartmentUpdateManyWithoutEmployeesNestedInput
    departmentHeads?: DepartmentHeadUpdateManyWithoutEmployeeNestedInput
    exceptions?: ExceptionUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutAttendanceRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    departments?: DepartmentUncheckedUpdateManyWithoutEmployeesNestedInput
    departmentHeads?: DepartmentHeadUncheckedUpdateManyWithoutEmployeeNestedInput
    exceptions?: ExceptionUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutExceptionsInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    isAdmin: boolean
    departments?: DepartmentCreateNestedManyWithoutEmployeesInput
    departmentHeads?: DepartmentHeadCreateNestedManyWithoutEmployeeInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutExceptionsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    isAdmin: boolean
    departments?: DepartmentUncheckedCreateNestedManyWithoutEmployeesInput
    departmentHeads?: DepartmentHeadUncheckedCreateNestedManyWithoutEmployeeInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutExceptionsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutExceptionsInput, EmployeeUncheckedCreateWithoutExceptionsInput>
  }

  export type EmployeeUpsertWithoutExceptionsInput = {
    update: XOR<EmployeeUpdateWithoutExceptionsInput, EmployeeUncheckedUpdateWithoutExceptionsInput>
    create: XOR<EmployeeCreateWithoutExceptionsInput, EmployeeUncheckedCreateWithoutExceptionsInput>
  }

  export type EmployeeUpdateWithoutExceptionsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    departments?: DepartmentUpdateManyWithoutEmployeesNestedInput
    departmentHeads?: DepartmentHeadUpdateManyWithoutEmployeeNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutExceptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    departments?: DepartmentUncheckedUpdateManyWithoutEmployeesNestedInput
    departmentHeads?: DepartmentHeadUncheckedUpdateManyWithoutEmployeeNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type DepartmentUpdateWithoutEmployeesInput = {
    name?: StringFieldUpdateOperationsInput | string
    departmentHeads?: DepartmentHeadUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutEmployeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    departmentHeads?: DepartmentHeadUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutDepartmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentHeadUpdateWithoutEmployeeInput = {
    department?: DepartmentUpdateOneRequiredWithoutDepartmentHeadsNestedInput
  }

  export type DepartmentHeadUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentHeadUncheckedUpdateManyWithoutDepartmentHeadsInput = {
    id?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
  }

  export type AttendanceRecordUpdateWithoutEmployeeInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    punchType?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    punchType?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutAttendanceRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    punchType?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExceptionUpdateWithoutEmployeeInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type ExceptionUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type ExceptionUncheckedUpdateManyWithoutExceptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeUpdateWithoutDepartmentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    departmentHeads?: DepartmentHeadUpdateManyWithoutEmployeeNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutEmployeeNestedInput
    exceptions?: ExceptionUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDepartmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    departmentHeads?: DepartmentHeadUncheckedUpdateManyWithoutEmployeeNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutEmployeeNestedInput
    exceptions?: ExceptionUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutEmployeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DepartmentHeadUpdateWithoutDepartmentInput = {
    employee?: EmployeeUpdateOneRequiredWithoutDepartmentHeadsNestedInput
  }

  export type DepartmentHeadUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}